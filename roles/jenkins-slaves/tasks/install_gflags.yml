---
- name: install_gflags | check if gflags is installed
  stat:
    path: "{{ hbase_native_home }}/lib/libgflags.so"
  register: stat_result

- name: install_gflags | set fact false if gflags is not installed
  set_fact:
    gflags_exists: false
  when: stat_result.stat.exists == False

- name: install_gflags | set fact true if gflags is installed
  set_fact:
    gflags_exists: true
  when: stat_result.stat.exists == True

- name: install_gflags | skip gflags installation
  debug: msg="skipping gflags installation as it is already installed"
  when: gflags_exists

- name: install_gflags | download gflags
  get_url: url="{{gflags_url}}" dest=/tmp/{{ gflags_url | basename }} timeout=120
  when: not gflags_exists

- name: install_gflags | unarchive gflags tar.gz
  unarchive: src=/tmp/{{ gflags_url | basename }} dest=/tmp/ copy=no
  when: not gflags_exists

- name: install_gflags | install gflags from src
  shell: mkdir build; cd build; cmake .. -DCMAKE_INSTALL_PREFIX={{hbase_native_home}} -DBUILD_SHARED_LIBS=ON ; make; make install;
  args:
   chdir: /tmp/gflags-{{gflags_version}}
  when: not gflags_exists

- name: install_gflags | rm /tmp/gflags-{{gflags_version}}
  sudo: yes
  sudo_user: root
  shell: rm -rf /tmp/gflags-{{gflags_version}}
  when: not gflags_exists

- name: install_gflags | rm /tmp/{{ gflags_url | basename }}
  sudo: yes
  sudo_user: root
  shell: rm -rf /tmp/{{ gflags_url | basename }}
  when: not gflags_exists
